# import required packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN
from sklearn import preprocessing
from keras.models import load_model
import tensorflow as tf

# YOUR IMPLEMENTATION
# Thoroughly comment your code to make it easy to follow


# load data from the two files generated by the student
def import_and_preprocess_data():
    # I have to import training data to perform the standardization
    # load training data
    temp = np.loadtxt(open("data/train_data_RNN.csv", "rb"), delimiter=',')
    X_train = temp[:,:-1]
    y_train = temp[:,-1]
    
    # load test data
    del temp
    temp = np.loadtxt(open("data/test_data_RNN.csv", "rb"), delimiter=',')
    X_test = temp[:,:-1]
    y_test = temp[:,-1]
    
    
    # perform pre-processing on the data 
    # standardize data to remove "units"
    scaler = preprocessing.StandardScaler().fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)
    
    # reshape data n_days = 3, n_features = 4
    n_days = 3
    n_features = 4
    X_train = np.reshape(X_train,(len(X_train), n_days, n_features))
    X_test = np.reshape(X_test,(len(X_test), n_days, n_features))
    
    # normalize labels so the loss is easier to understand
    y_train = y_train.reshape(-1, 1)
    y_test = y_test.reshape(-1, 1)
    label_normalizer = preprocessing.MinMaxScaler().fit(y_train)
    y_test = label_normalizer.transform(y_test)
    
    return label_normalizer , X_test, y_test

# generate required plot
def plot_predictions(X_test, y_test, model, label_normalizer):
    # need to de-normalize the data so they have the original values 
    pred = model.predict(X_test)
    pred = label_normalizer.inverse_transform(pred)
    y_test = label_normalizer.inverse_transform(y_test)
    plt.plot(y_test, label='ground truth')
    plt.plot(pred, label='prediction')
    plt.legend()
    plt.xlabel('Days: Randomized')
    plt.ylabel('Opening Price')
    #plt.savefig('prediction')
    plt.show()

# ran into some memory issues so i had to do this
def gpu_settings():
    try:
        physical_devices = tf.config.list_physical_devices('GPU')
        tf.config.experimental.set_memory_growth(physical_devices[0], True)
    except:
        pass
  
    
if __name__ == "__main__":
    # fixes gpu memory issues (if any)
    # please comment if this gives you an issue as Ive used tf2
    # I tried to keep the code flexible so it doesnt fail with tf1
    gpu_settings()

	# 1. Load your saved model
    model = load_model('models/20607230_RNN_model.h5')
	# 2. Load your testing data
    # Here I normalize the data so I can get a normalized loss
    label_normalizer, X_test, y_test = import_and_preprocess_data()
	# 3. Run prediction on the test data and output required plot and loss
    print("Evaluating model on test data:")
    testing_score = model.evaluate(X_test, y_test, verbose=1)
    print("Normalized Testing Loss:")
    print(testing_score)
    
    plot_predictions(X_test, y_test, model, label_normalizer)
    